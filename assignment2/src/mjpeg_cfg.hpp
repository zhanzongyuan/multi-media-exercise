#ifndef MJPEG_CFG_HPP
#define MJPEG_CFG_HPP
#include <cmath>
#include <map>
#include <opencv2/core.hpp>
#include <opencv2/core/ocl.hpp>
#include <opencv2/core/utility.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/imgproc.hpp>
#include <vector>

namespace mini_jpeg
{
static const double PI = std::atan(1) * 4;
// rgb <==> ycrcb
static const cv::Mat_<double> RGB2YCRCB_T =
    (cv::Mat_<double>(3, 3) << 65.481 / 255, 128.553 / 255, 24.966 / 255,
     -37.797 / 255, -74.203 / 255, 112.0 / 255,
     112.0 / 255, -93.786 / 255, -18.214 / 255);
static const cv::Mat_<double> RGB2YCRCB_RE = (cv::Mat_<double>(3, 1) << 16, 128, 128);
static const cv::Mat_<double> YCRCB2RGB_T =
    (cv::Mat_<double>(3, 3) << 255.0 / 219.0, 0.0, 255.0 / 224.0 * 1.402,
     255.0 / 219.0, -255.0 / 224.0 * 1.772 * 0.114 / 0.587, -255.0 / 224.0 * 1.402 * 0.299 / 0.587,
     255.0 / 219.0, 225.0 / 224 * 1.772, 0.0);
static const cv::Mat_<double> YCRCB2RGB_RE = (cv::Mat_<double>(3, 1) << -16, -128, -128);

// quantization table
static const cv::Mat_<int> LUM_QT =
    (cv::Mat_<int>(8, 8) << 16, 11, 10, 16, 24, 40, 51, 61,
     12, 12, 14, 19, 26, 58, 60, 55,
     14, 13, 16, 24, 40, 57, 69, 56,
     14, 17, 22, 29, 51, 87, 80, 62,
     18, 22, 37, 56, 68, 109, 103, 77,
     24, 35, 55, 64, 81, 104, 113, 92,
     49, 64, 78, 87, 103, 121, 120, 101,
     72, 92, 95, 98, 112, 100, 103, 99);
static const cv::Mat_<int> CHR_QT =
    (cv::Mat_<int>(8, 8) << 17, 18, 24, 47, 99, 99, 99, 99,
     18, 21, 26, 66, 99, 99, 99, 99,
     24, 26, 56, 99, 99, 99, 99, 99,
     47, 66, 99, 99, 99, 99, 99, 99,
     99, 99, 99, 99, 99, 99, 99, 99,
     99, 99, 99, 99, 99, 99, 99, 99,
     99, 99, 99, 99, 99, 99, 99, 99,
     99, 99, 99, 99, 99, 99, 99, 99);

// huffman tables
const int _ONE_ = 1;
const bool IS_BIGENDIAN = (*(uint8_t *)&_ONE_) == 0;
struct _bits
{
    uint8_t bits[2];
    uint16_t _len;
    _bits(uint16_t bits = 0, uint16_t _len = 0)
    {
        if (IS_BIGENDIAN)
        {
            this->bits[0] = ((uint8_t *)&bits)[0] & (uint8_t(0b11111111) >> (16 - _len));
            this->bits[1] = ((uint8_t *)&bits)[1] & (uint8_t(0b11111111) >> (8 > _len ? (8 - _len) : 0));
        }
        else
        {
            this->bits[0] = ((uint8_t *)&bits)[1] & (uint8_t(0b11111111) >> (16 - _len));
            this->bits[1] = ((uint8_t *)&bits)[0] & (uint8_t(0b11111111) >> (8 > _len ? (8 - _len) : 0));
        }
        this->_len = _len;
    }
    int intformat() const
    {
        return int(this->bits[0]) << 8 | int(this->bits[1]);
    }
    bool operator<(const _bits &b2) const
    {
        if (this->_len < b2._len)
        {
            return true;
        }
        else if (this->_len > b2._len)
        {
            return false;
        }
        else
        {
            return this->intformat() < b2.intformat();
        }
    }
    int write(uint8_t *dst, int &bias)
    {
        if (bias > 8)
        {
            throw std::invalid_argument("bias must be less than 8!!!");
        }
        if (this->_len == 0)
            return 0;

        int left_b = this->_len;
        int dst_i = 0;
        int cur_i = (16 - left_b) / 8;
        while (left_b > 0)
        {
            // extract one byte from bits and its fill
            uint8_t buf = this->bits[cur_i];
            int fill_b = (left_b % 8 == 0) ? 8 : (left_b % 8);
            left_b -= fill_b;

            // fill the byte to dst by loop.
            uint8_t nbuf = uint8_t(buf << (8 - fill_b)) >> bias;
            uint8_t initmask = (uint8_t(0b11111111) >> bias);
            do
            {
                dst[dst_i] &= (~initmask);
                dst[dst_i] |= nbuf;
                fill_b = fill_b + bias - 8;
                if (fill_b >= 0)
                {
                    dst_i++;
                    bias = 0;
                    nbuf = uint8_t(buf << (8 - fill_b)) >> bias;
                    initmask = (uint8_t(0b11111111) >> bias);
                }
                else
                {
                    bias = 8 + fill_b;
                }
            } while (fill_b > 0);
            cur_i++;
        }
        // return write byte.
        return dst_i;
    }
    int read(const uint8_t *src, int &bias, int size = 0)
    {
        if (bias > 8)
        {
            throw std::invalid_argument("bias must be less than 8!!!");
        }
        if (size != 0)
            this->_len = size;
        this->bits[0] = uint8_t(0b00000000);
        this->bits[1] = uint8_t(0b00000000);
        if (this->_len == 0)
            return 0;

        int left_b = this->_len;
        int bits_bias = 16 - this->_len;
        int dst_i = bits_bias / 8, cur_i = 0;
        bits_bias %= 8;
        while (left_b > 0)
        {
            // extract one byte from src and its fill
            uint8_t buf = src[cur_i];
            int fill_b = 8 - bias;
            left_b -= fill_b;

            // fill the byte to dst bits by loop.
            uint8_t nbuf = uint8_t(buf << (8 - fill_b)) >> bits_bias;
            do
            {
                this->bits[dst_i] |= nbuf;
                fill_b = fill_b + bits_bias - 8;
                if (fill_b >= 0)
                {
                    dst_i++;
                    bits_bias = 0;
                    nbuf = uint8_t(buf << (8 - fill_b)) >> bits_bias;
                }
                else
                {
                    bits_bias = 8 + fill_b;
                }
            } while (fill_b > 0 and dst_i < 2);

            bias = fill_b <= 0 ? 0 : 8 - fill_b;
            cur_i = fill_b <= 0 ? cur_i + 1 : cur_i;
        }
        // return write byte.
        return cur_i;
    }
};

// zigzag walk matrix
static const cv::Vec2i ZIGZAG[64] = {
    cv::Vec2i(0, 0),
    cv::Vec2i(0, 1),
    cv::Vec2i(1, 0),
    cv::Vec2i(2, 0),
    cv::Vec2i(1, 1),
    cv::Vec2i(0, 2),
    cv::Vec2i(0, 3),
    cv::Vec2i(1, 2),
    cv::Vec2i(2, 1),
    cv::Vec2i(3, 0),
    cv::Vec2i(4, 0),
    cv::Vec2i(3, 1),
    cv::Vec2i(2, 2),
    cv::Vec2i(1, 3),
    cv::Vec2i(0, 4),
    cv::Vec2i(0, 5),
    cv::Vec2i(1, 4),
    cv::Vec2i(2, 3),
    cv::Vec2i(3, 2),
    cv::Vec2i(4, 1),
    cv::Vec2i(5, 0),
    cv::Vec2i(6, 0),
    cv::Vec2i(5, 1),
    cv::Vec2i(4, 2),
    cv::Vec2i(3, 3),
    cv::Vec2i(2, 4),
    cv::Vec2i(1, 5),
    cv::Vec2i(0, 6),
    cv::Vec2i(0, 7),
    cv::Vec2i(1, 6),
    cv::Vec2i(2, 5),
    cv::Vec2i(3, 4),
    cv::Vec2i(4, 3),
    cv::Vec2i(5, 2),
    cv::Vec2i(6, 1),
    cv::Vec2i(7, 0),
    cv::Vec2i(7, 1),
    cv::Vec2i(6, 2),
    cv::Vec2i(5, 3),
    cv::Vec2i(4, 4),
    cv::Vec2i(3, 5),
    cv::Vec2i(2, 6),
    cv::Vec2i(1, 7),
    cv::Vec2i(2, 7),
    cv::Vec2i(3, 6),
    cv::Vec2i(4, 5),
    cv::Vec2i(5, 4),
    cv::Vec2i(6, 3),
    cv::Vec2i(7, 2),
    cv::Vec2i(7, 3),
    cv::Vec2i(6, 4),
    cv::Vec2i(5, 5),
    cv::Vec2i(4, 6),
    cv::Vec2i(3, 7),
    cv::Vec2i(4, 7),
    cv::Vec2i(5, 6),
    cv::Vec2i(6, 5),
    cv::Vec2i(7, 4),
    cv::Vec2i(7, 5),
    cv::Vec2i(6, 6),
    cv::Vec2i(5, 7),
    cv::Vec2i(6, 7),
    cv::Vec2i(7, 6),
    cv::Vec2i(7, 7)};

// luminance DC coef diff
static const _bits LU_DC[12] = {
    _bits(0b00, 2),
    _bits(0b010, 3),
    _bits(0b011, 3),
    _bits(0b100, 3),
    _bits(0b101, 3),
    _bits(0b110, 3),
    _bits(0b1110, 4),
    _bits(0b11110, 5),
    _bits(0b111110, 6),
    _bits(0b1111110, 7),
    _bits(0b11111110, 8),
    _bits(0b111111110, 9)};
static const std::map<_bits, int> I_LU_DC = { // inverse table
    {_bits(0b00, 2), 0},
    {_bits(0b010, 3), 1},
    {_bits(0b011, 3), 2},
    {_bits(0b100, 3), 3},
    {_bits(0b101, 3), 4},
    {_bits(0b110, 3), 5},
    {_bits(0b1110, 4), 6},
    {_bits(0b11110, 5), 7},
    {_bits(0b111110, 6), 8},
    {_bits(0b1111110, 7), 9},
    {_bits(0b11111110, 8), 10},
    {_bits(0b111111110, 9), 11}};

// chrominance DC coef diff
static const _bits CHR_DC[12] = {
    _bits(0b00, 2),
    _bits(0b01, 2),
    _bits(0b10, 2),
    _bits(0b110, 3),
    _bits(0b1110, 4),
    _bits(0b11110, 5),
    _bits(0b111110, 6),
    _bits(0b1111110, 7),
    _bits(0b11111110, 8),
    _bits(0b111111110, 9),
    _bits(0b1111111110, 10),
    _bits(0b11111111110, 11)};
static const std::map<_bits, int> I_CHR_DC = {
    {_bits(0b00, 2), 0},
    {_bits(0b01, 2), 1},
    {_bits(0b10, 2), 2},
    {_bits(0b110, 3), 3},
    {_bits(0b1110, 4), 4},
    {_bits(0b11110, 5), 5},
    {_bits(0b111110, 6), 6},
    {_bits(0b1111110, 7), 7},
    {_bits(0b11111110, 8), 8},
    {_bits(0b111111110, 9), 9},
    {_bits(0b1111111110, 10), 10},
    {_bits(0b11111111110, 11), 11}};

// luminance AC coef Run/Size (0-F/1-A)
static const _bits LU_AC_EOB(0b1010, 4);         // 0/0
static const _bits LU_AC_ZRL(0b11111111001, 11); // F/0
static const std::vector<std::vector<_bits>> LU_AC{
    {_bits(0b00, 2), // 0/1
     _bits(0b01, 2),
     _bits(0b100, 3),
     _bits(0b1011, 4),
     _bits(0b11010, 5),
     _bits(0b1111000, 7),
     _bits(0b11111000, 8),
     _bits(0b1111110110, 10),
     _bits(0b1111111110000010, 16),
     _bits(0b1111111110000011, 16)},
    {_bits(0b1100, 4), // 1/1
     _bits(0b11011, 5),
     _bits(0b1111001, 7),
     _bits(0b111110110, 9),
     _bits(0b11111110110, 11),
     _bits(0b1111111110000100, 16),
     _bits(0b1111111110000101, 16),
     _bits(0b1111111110000110, 16),
     _bits(0b1111111110000111, 16),
     _bits(0b1111111110001000, 16)},
    {_bits(0b11100, 5), // 2/1
     _bits(0b11111001, 8),
     _bits(0b1111110111, 10),
     _bits(0b111111110100, 12),
     _bits(0b1111111110001001, 16),
     _bits(0b1111111110001010, 16),
     _bits(0b1111111110001011, 16),
     _bits(0b1111111110001100, 16),
     _bits(0b1111111110001101, 16),
     _bits(0b1111111110001110, 16)},
    {_bits(0b111010, 6), // 3/1
     _bits(0b111110111, 9),
     _bits(0b111111110101, 12),
     _bits(0b1111111110001111, 16),
     _bits(0b1111111110010000, 16),
     _bits(0b1111111110010001, 16),
     _bits(0b1111111110010010, 16),
     _bits(0b1111111110010011, 16),
     _bits(0b1111111110010100, 16),
     _bits(0b1111111110010101, 16)},

    {_bits(0b111011, 6), // 4/1
     _bits(0b1111111000, 10),
     _bits(0b1111111110010110, 16),
     _bits(0b1111111110010111, 16),
     _bits(0b1111111110011000, 16),
     _bits(0b1111111110011001, 16),
     _bits(0b1111111110011010, 16),
     _bits(0b1111111110011011, 16),
     _bits(0b1111111110011100, 16),
     _bits(0b1111111110011101, 16)},
    {_bits(0b1111010, 7), // 5/1
     _bits(0b11111110111, 11),
     _bits(0b1111111110011110, 16),
     _bits(0b1111111110011111, 16),
     _bits(0b1111111110100000, 16),
     _bits(0b1111111110100001, 16),
     _bits(0b1111111110100010, 16),
     _bits(0b1111111110100011, 16),
     _bits(0b1111111110100100, 16),
     _bits(0b1111111110100101, 16)},
    {_bits(0b1111011, 7), // 6/1
     _bits(0b111111110110, 12),
     _bits(0b1111111110100110, 16),
     _bits(0b1111111110100111, 16),
     _bits(0b1111111110101000, 16),
     _bits(0b1111111110101001, 16),
     _bits(0b1111111110101010, 16),
     _bits(0b1111111110101011, 16),
     _bits(0b1111111110101100, 16),
     _bits(0b1111111110101101, 16)},
    {_bits(0b11111010, 8), // 7/1
     _bits(0b111111110111, 12),
     _bits(0b1111111110101110, 16),
     _bits(0b1111111110101111, 16),
     _bits(0b1111111110110000, 16),
     _bits(0b1111111110110001, 16),
     _bits(0b1111111110110010, 16),
     _bits(0b1111111110110011, 16),
     _bits(0b1111111110110100, 16),
     _bits(0b1111111110110101, 16)},

    {_bits(0b111111000, 9), // 8/1
     _bits(0b111111111000000, 15),
     _bits(0b1111111110110110, 16),
     _bits(0b1111111110110111, 16),
     _bits(0b1111111110111000, 16),
     _bits(0b1111111110111001, 16),
     _bits(0b1111111110111010, 16),
     _bits(0b1111111110111011, 16),
     _bits(0b1111111110111100, 16),
     _bits(0b1111111110111101, 16)},
    {_bits(0b111111001, 9), // 9/1
     _bits(0b1111111110111110, 16),
     _bits(0b1111111110111111, 16),
     _bits(0b1111111111000000, 16),
     _bits(0b1111111111000001, 16),
     _bits(0b1111111111000010, 16),
     _bits(0b1111111111000011, 16),
     _bits(0b1111111111000100, 16),
     _bits(0b1111111111000101, 16),
     _bits(0b1111111111000110, 16)},
    {_bits(0b111111010, 9), // A/1
     _bits(0b1111111111000111, 16),
     _bits(0b1111111111001000, 16),
     _bits(0b1111111111001001, 16),
     _bits(0b1111111111001010, 16),
     _bits(0b1111111111001011, 16),
     _bits(0b1111111111001100, 16),
     _bits(0b1111111111001101, 16),
     _bits(0b1111111111001110, 16),
     _bits(0b1111111111001111, 16)},
    {_bits(0b1111111001, 10), // B/1
     _bits(0b1111111111010000, 16),
     _bits(0b1111111111010001, 16),
     _bits(0b1111111111010010, 16),
     _bits(0b1111111111010011, 16),
     _bits(0b1111111111010100, 16),
     _bits(0b1111111111010101, 16),
     _bits(0b1111111111010110, 16),
     _bits(0b1111111111010111, 16),
     _bits(0b1111111111011000, 16)},

    {_bits(0b1111111010, 10), // C/1
     _bits(0b1111111111011001, 16),
     _bits(0b1111111111011010, 16),
     _bits(0b1111111111011011, 16),
     _bits(0b1111111111011100, 16),
     _bits(0b1111111111011101, 16),
     _bits(0b1111111111011110, 16),
     _bits(0b1111111111011111, 16),
     _bits(0b1111111111100000, 16),
     _bits(0b1111111111100001, 16)},
    {_bits(0b11111111000, 11), // D/1
     _bits(0b1111111111100010, 16),
     _bits(0b1111111111100011, 16),
     _bits(0b1111111111100100, 16),
     _bits(0b1111111111100101, 16),
     _bits(0b1111111111100110, 16),
     _bits(0b1111111111100111, 16),
     _bits(0b1111111111101000, 16),
     _bits(0b1111111111101001, 16),
     _bits(0b1111111111101010, 16)},
    {_bits(0b1111111111101011, 16), // G/1
     _bits(0b1111111111101100, 16),
     _bits(0b1111111111101101, 16),
     _bits(0b1111111111101110, 16),
     _bits(0b1111111111101111, 16),
     _bits(0b1111111111110000, 16),
     _bits(0b1111111111110001, 16),
     _bits(0b1111111111110010, 16),
     _bits(0b1111111111110011, 16),
     _bits(0b1111111111110100, 16)},
    {_bits(0b1111111111110101, 16), // F/1
     _bits(0b1111111111110110, 16),
     _bits(0b1111111111110111, 16),
     _bits(0b1111111111111000, 16),
     _bits(0b1111111111111001, 16),
     _bits(0b1111111111111010, 16),
     _bits(0b1111111111111011, 16),
     _bits(0b1111111111111100, 16),
     _bits(0b1111111111111101, 16),
     _bits(0b1111111111111110, 16)}};
static const std::map<_bits, cv::Vec2i> I_LU_AC = {
    {_bits(0b1010, 4), cv::Vec2i(0, 0)},
    {_bits(0b11111111001, 11), cv::Vec2i(15, 0)},
    {_bits(0b00, 2), cv::Vec2i(0, 1)},
    {_bits(0b01, 2), cv::Vec2i(0, 2)},
    {_bits(0b100, 3), cv::Vec2i(0, 3)},
    {_bits(0b1011, 4), cv::Vec2i(0, 4)},
    {_bits(0b11010, 5), cv::Vec2i(0, 5)},
    {_bits(0b1111000, 7), cv::Vec2i(0, 6)},
    {_bits(0b11111000, 8), cv::Vec2i(0, 7)},
    {_bits(0b1111110110, 10), cv::Vec2i(0, 8)},
    {_bits(0b1111111110000010, 16), cv::Vec2i(0, 9)},
    {_bits(0b1111111110000011, 16), cv::Vec2i(0, 10)},
    {_bits(0b1100, 4), cv::Vec2i(1, 1)},
    {_bits(0b11011, 5), cv::Vec2i(1, 2)},
    {_bits(0b1111001, 7), cv::Vec2i(1, 3)},
    {_bits(0b111110110, 9), cv::Vec2i(1, 4)},
    {_bits(0b11111110110, 11), cv::Vec2i(1, 5)},
    {_bits(0b1111111110000100, 16), cv::Vec2i(1, 6)},
    {_bits(0b1111111110000101, 16), cv::Vec2i(1, 7)},
    {_bits(0b1111111110000110, 16), cv::Vec2i(1, 8)},
    {_bits(0b1111111110000111, 16), cv::Vec2i(1, 9)},
    {_bits(0b1111111110001000, 16), cv::Vec2i(1, 10)},
    {_bits(0b11100, 5), cv::Vec2i(2, 1)},
    {_bits(0b11111001, 8), cv::Vec2i(2, 2)},
    {_bits(0b1111110111, 10), cv::Vec2i(2, 3)},
    {_bits(0b111111110100, 12), cv::Vec2i(2, 4)},
    {_bits(0b1111111110001001, 16), cv::Vec2i(2, 5)},
    {_bits(0b1111111110001010, 16), cv::Vec2i(2, 6)},
    {_bits(0b1111111110001011, 16), cv::Vec2i(2, 7)},
    {_bits(0b1111111110001100, 16), cv::Vec2i(2, 8)},
    {_bits(0b1111111110001101, 16), cv::Vec2i(2, 9)},
    {_bits(0b1111111110001110, 16), cv::Vec2i(2, 10)},
    {_bits(0b111010, 6), cv::Vec2i(3, 1)},
    {_bits(0b111110111, 9), cv::Vec2i(3, 2)},
    {_bits(0b111111110101, 12), cv::Vec2i(3, 3)},
    {_bits(0b1111111110001111, 16), cv::Vec2i(3, 4)},
    {_bits(0b1111111110010000, 16), cv::Vec2i(3, 5)},
    {_bits(0b1111111110010001, 16), cv::Vec2i(3, 6)},
    {_bits(0b1111111110010010, 16), cv::Vec2i(3, 7)},
    {_bits(0b1111111110010011, 16), cv::Vec2i(3, 8)},
    {_bits(0b1111111110010100, 16), cv::Vec2i(3, 9)},
    {_bits(0b1111111110010101, 16), cv::Vec2i(3, 10)},
    {_bits(0b111011, 6), cv::Vec2i(4, 1)},
    {_bits(0b1111111000, 10), cv::Vec2i(4, 2)},
    {_bits(0b1111111110010110, 16), cv::Vec2i(4, 3)},
    {_bits(0b1111111110010111, 16), cv::Vec2i(4, 4)},
    {_bits(0b1111111110011000, 16), cv::Vec2i(4, 5)},
    {_bits(0b1111111110011001, 16), cv::Vec2i(4, 6)},
    {_bits(0b1111111110011010, 16), cv::Vec2i(4, 7)},
    {_bits(0b1111111110011011, 16), cv::Vec2i(4, 8)},
    {_bits(0b1111111110011100, 16), cv::Vec2i(4, 9)},
    {_bits(0b1111111110011101, 16), cv::Vec2i(4, 10)},
    {_bits(0b1111010, 7), cv::Vec2i(5, 1)},
    {_bits(0b11111110111, 11), cv::Vec2i(5, 2)},
    {_bits(0b1111111110011110, 16), cv::Vec2i(5, 3)},
    {_bits(0b1111111110011111, 16), cv::Vec2i(5, 4)},
    {_bits(0b1111111110100000, 16), cv::Vec2i(5, 5)},
    {_bits(0b1111111110100001, 16), cv::Vec2i(5, 6)},
    {_bits(0b1111111110100010, 16), cv::Vec2i(5, 7)},
    {_bits(0b1111111110100011, 16), cv::Vec2i(5, 8)},
    {_bits(0b1111111110100100, 16), cv::Vec2i(5, 9)},
    {_bits(0b1111111110100101, 16), cv::Vec2i(5, 10)},
    {_bits(0b1111011, 7), cv::Vec2i(6, 1)},
    {_bits(0b111111110110, 12), cv::Vec2i(6, 2)},
    {_bits(0b1111111110100110, 16), cv::Vec2i(6, 3)},
    {_bits(0b1111111110100111, 16), cv::Vec2i(6, 4)},
    {_bits(0b1111111110101000, 16), cv::Vec2i(6, 5)},
    {_bits(0b1111111110101001, 16), cv::Vec2i(6, 6)},
    {_bits(0b1111111110101010, 16), cv::Vec2i(6, 7)},
    {_bits(0b1111111110101011, 16), cv::Vec2i(6, 8)},
    {_bits(0b1111111110101100, 16), cv::Vec2i(6, 9)},
    {_bits(0b1111111110101101, 16), cv::Vec2i(6, 10)},
    {_bits(0b11111010, 8), cv::Vec2i(7, 1)},
    {_bits(0b111111110111, 12), cv::Vec2i(7, 2)},
    {_bits(0b1111111110101110, 16), cv::Vec2i(7, 3)},
    {_bits(0b1111111110101111, 16), cv::Vec2i(7, 4)},
    {_bits(0b1111111110110000, 16), cv::Vec2i(7, 5)},
    {_bits(0b1111111110110001, 16), cv::Vec2i(7, 6)},
    {_bits(0b1111111110110010, 16), cv::Vec2i(7, 7)},
    {_bits(0b1111111110110011, 16), cv::Vec2i(7, 8)},
    {_bits(0b1111111110110100, 16), cv::Vec2i(7, 9)},
    {_bits(0b1111111110110101, 16), cv::Vec2i(7, 10)},
    {_bits(0b111111000, 9), cv::Vec2i(8, 1)},
    {_bits(0b111111111000000, 15), cv::Vec2i(8, 2)},
    {_bits(0b1111111110110110, 16), cv::Vec2i(8, 3)},
    {_bits(0b1111111110110111, 16), cv::Vec2i(8, 4)},
    {_bits(0b1111111110111000, 16), cv::Vec2i(8, 5)},
    {_bits(0b1111111110111001, 16), cv::Vec2i(8, 6)},
    {_bits(0b1111111110111010, 16), cv::Vec2i(8, 7)},
    {_bits(0b1111111110111011, 16), cv::Vec2i(8, 8)},
    {_bits(0b1111111110111100, 16), cv::Vec2i(8, 9)},
    {_bits(0b1111111110111101, 16), cv::Vec2i(8, 10)},
    {_bits(0b111111001, 9), cv::Vec2i(9, 1)},
    {_bits(0b1111111110111110, 16), cv::Vec2i(9, 2)},
    {_bits(0b1111111110111111, 16), cv::Vec2i(9, 3)},
    {_bits(0b1111111111000000, 16), cv::Vec2i(9, 4)},
    {_bits(0b1111111111000001, 16), cv::Vec2i(9, 5)},
    {_bits(0b1111111111000010, 16), cv::Vec2i(9, 6)},
    {_bits(0b1111111111000011, 16), cv::Vec2i(9, 7)},
    {_bits(0b1111111111000100, 16), cv::Vec2i(9, 8)},
    {_bits(0b1111111111000101, 16), cv::Vec2i(9, 9)},
    {_bits(0b1111111111000110, 16), cv::Vec2i(9, 10)},
    {_bits(0b111111010, 9), cv::Vec2i(10, 1)},
    {_bits(0b1111111111000111, 16), cv::Vec2i(10, 2)},
    {_bits(0b1111111111001000, 16), cv::Vec2i(10, 3)},
    {_bits(0b1111111111001001, 16), cv::Vec2i(10, 4)},
    {_bits(0b1111111111001010, 16), cv::Vec2i(10, 5)},
    {_bits(0b1111111111001011, 16), cv::Vec2i(10, 6)},
    {_bits(0b1111111111001100, 16), cv::Vec2i(10, 7)},
    {_bits(0b1111111111001101, 16), cv::Vec2i(10, 8)},
    {_bits(0b1111111111001110, 16), cv::Vec2i(10, 9)},
    {_bits(0b1111111111001111, 16), cv::Vec2i(10, 10)},
    {_bits(0b1111111001, 10), cv::Vec2i(11, 1)},
    {_bits(0b1111111111010000, 16), cv::Vec2i(11, 2)},
    {_bits(0b1111111111010001, 16), cv::Vec2i(11, 3)},
    {_bits(0b1111111111010010, 16), cv::Vec2i(11, 4)},
    {_bits(0b1111111111010011, 16), cv::Vec2i(11, 5)},
    {_bits(0b1111111111010100, 16), cv::Vec2i(11, 6)},
    {_bits(0b1111111111010101, 16), cv::Vec2i(11, 7)},
    {_bits(0b1111111111010110, 16), cv::Vec2i(11, 8)},
    {_bits(0b1111111111010111, 16), cv::Vec2i(11, 9)},
    {_bits(0b1111111111011000, 16), cv::Vec2i(11, 10)},
    {_bits(0b1111111010, 10), cv::Vec2i(12, 1)},
    {_bits(0b1111111111011001, 16), cv::Vec2i(12, 2)},
    {_bits(0b1111111111011010, 16), cv::Vec2i(12, 3)},
    {_bits(0b1111111111011011, 16), cv::Vec2i(12, 4)},
    {_bits(0b1111111111011100, 16), cv::Vec2i(12, 5)},
    {_bits(0b1111111111011101, 16), cv::Vec2i(12, 6)},
    {_bits(0b1111111111011110, 16), cv::Vec2i(12, 7)},
    {_bits(0b1111111111011111, 16), cv::Vec2i(12, 8)},
    {_bits(0b1111111111100000, 16), cv::Vec2i(12, 9)},
    {_bits(0b1111111111100001, 16), cv::Vec2i(12, 10)},
    {_bits(0b11111111000, 11), cv::Vec2i(13, 1)},
    {_bits(0b1111111111100010, 16), cv::Vec2i(13, 2)},
    {_bits(0b1111111111100011, 16), cv::Vec2i(13, 3)},
    {_bits(0b1111111111100100, 16), cv::Vec2i(13, 4)},
    {_bits(0b1111111111100101, 16), cv::Vec2i(13, 5)},
    {_bits(0b1111111111100110, 16), cv::Vec2i(13, 6)},
    {_bits(0b1111111111100111, 16), cv::Vec2i(13, 7)},
    {_bits(0b1111111111101000, 16), cv::Vec2i(13, 8)},
    {_bits(0b1111111111101001, 16), cv::Vec2i(13, 9)},
    {_bits(0b1111111111101010, 16), cv::Vec2i(13, 10)},
    {_bits(0b1111111111101011, 16), cv::Vec2i(14, 1)},
    {_bits(0b1111111111101100, 16), cv::Vec2i(14, 2)},
    {_bits(0b1111111111101101, 16), cv::Vec2i(14, 3)},
    {_bits(0b1111111111101110, 16), cv::Vec2i(14, 4)},
    {_bits(0b1111111111101111, 16), cv::Vec2i(14, 5)},
    {_bits(0b1111111111110000, 16), cv::Vec2i(14, 6)},
    {_bits(0b1111111111110001, 16), cv::Vec2i(14, 7)},
    {_bits(0b1111111111110010, 16), cv::Vec2i(14, 8)},
    {_bits(0b1111111111110011, 16), cv::Vec2i(14, 9)},
    {_bits(0b1111111111110100, 16), cv::Vec2i(14, 10)},
    {_bits(0b1111111111110101, 16), cv::Vec2i(15, 1)},
    {_bits(0b1111111111110110, 16), cv::Vec2i(15, 2)},
    {_bits(0b1111111111110111, 16), cv::Vec2i(15, 3)},
    {_bits(0b1111111111111000, 16), cv::Vec2i(15, 4)},
    {_bits(0b1111111111111001, 16), cv::Vec2i(15, 5)},
    {_bits(0b1111111111111010, 16), cv::Vec2i(15, 6)},
    {_bits(0b1111111111111011, 16), cv::Vec2i(15, 7)},
    {_bits(0b1111111111111100, 16), cv::Vec2i(15, 8)},
    {_bits(0b1111111111111101, 16), cv::Vec2i(15, 9)},
    {_bits(0b1111111111111110, 16), cv::Vec2i(15, 10)}};

// chrominance AC coef
static const _bits CHR_AC_EOB(0b00, 2);          // 0/0
static const _bits CHR_AC_ZRL(0b1111111010, 10); // F/0
static const std::vector<std::vector<_bits>> CHR_AC{
    {_bits(0b01, 2), // 0/1
     _bits(0b100, 3),
     _bits(0b1010, 4),
     _bits(0b11000, 5),
     _bits(0b11001, 5),
     _bits(0b111000, 6),
     _bits(0b1111000, 7),
     _bits(0b111110100, 9),
     _bits(0b1111110110, 10),
     _bits(0b111111110100, 12)},
    {_bits(0b1011, 4), // 1/1
     _bits(0b111001, 6),
     _bits(0b11110110, 8),
     _bits(0b111110101, 9),
     _bits(0b11111110110, 11),
     _bits(0b111111110101, 12),
     _bits(0b1111111110001000, 16),
     _bits(0b1111111110001001, 16),
     _bits(0b1111111110001010, 16),
     _bits(0b1111111110001011, 16)},
    {_bits(0b11010, 5), // 2/1
     _bits(0b11110111, 8),
     _bits(0b1111110111, 10),
     _bits(0b111111110110, 12),
     _bits(0b111111111000010, 15),
     _bits(0b1111111110001100, 16),
     _bits(0b1111111110001101, 16),
     _bits(0b1111111110001110, 16),
     _bits(0b1111111110001111, 16),
     _bits(0b1111111110010000, 16)},
    {_bits(0b11011, 5), // 3/1
     _bits(0b11111000, 8),
     _bits(0b1111111000, 10),
     _bits(0b111111110111, 12),
     _bits(0b1111111110010001, 16),
     _bits(0b1111111110010010, 16),
     _bits(0b1111111110010011, 16),
     _bits(0b1111111110010100, 16),
     _bits(0b1111111110010101, 16),
     _bits(0b1111111110010110, 16)},

    {_bits(0b111010, 6), // 4/1
     _bits(0b111110110, 9),
     _bits(0b1111111110010111, 16),
     _bits(0b1111111110011000, 16),
     _bits(0b1111111110011001, 16),
     _bits(0b1111111110011010, 16),
     _bits(0b1111111110011011, 16),
     _bits(0b1111111110011100, 16),
     _bits(0b1111111110011101, 16),
     _bits(0b1111111110011110, 16)},
    {_bits(0b111011, 6), // 5/1
     _bits(0b1111111001, 10),
     _bits(0b1111111110011111, 16),
     _bits(0b1111111110100000, 16),
     _bits(0b1111111110100001, 16),
     _bits(0b1111111110100010, 16),
     _bits(0b1111111110100011, 16),
     _bits(0b1111111110100100, 16),
     _bits(0b1111111110100101, 16),
     _bits(0b1111111110100110, 16)},
    {_bits(0b1111001, 7), // 6/1
     _bits(0b11111110111, 11),
     _bits(0b1111111110100111, 16),
     _bits(0b1111111110101000, 16),
     _bits(0b1111111110101001, 16),
     _bits(0b1111111110101010, 16),
     _bits(0b1111111110101011, 16),
     _bits(0b1111111110101100, 16),
     _bits(0b1111111110101101, 16),
     _bits(0b1111111110101110, 16)},
    {_bits(0b1111010, 7), // 7/1
     _bits(0b11111111000, 11),
     _bits(0b1111111110101111, 16),
     _bits(0b1111111110110000, 16),
     _bits(0b1111111110110001, 16),
     _bits(0b1111111110110010, 16),
     _bits(0b1111111110110011, 16),
     _bits(0b1111111110110100, 16),
     _bits(0b1111111110110101, 16),
     _bits(0b1111111110110110, 16)},

    {_bits(0b11111001, 8), // 8/1
     _bits(0b1111111110110111, 16),
     _bits(0b1111111110111000, 16),
     _bits(0b1111111110111001, 16),
     _bits(0b1111111110111010, 16),
     _bits(0b1111111110111011, 16),
     _bits(0b1111111110111100, 16),
     _bits(0b1111111110111101, 16),
     _bits(0b1111111110111110, 16),
     _bits(0b1111111110111111, 16)},
    {_bits(0b111110111, 9), // 9/1
     _bits(0b1111111111000000, 16),
     _bits(0b1111111111000001, 16),
     _bits(0b1111111111000010, 16),
     _bits(0b1111111111000011, 16),
     _bits(0b1111111111000100, 16),
     _bits(0b1111111111000101, 16),
     _bits(0b1111111111000110, 16),
     _bits(0b1111111111000111, 16),
     _bits(0b1111111111001000, 16)},
    {_bits(0b111111000, 9), // A/1
     _bits(0b1111111111001001, 16),
     _bits(0b1111111111001010, 16),
     _bits(0b1111111111001011, 16),
     _bits(0b1111111111001100, 16),
     _bits(0b1111111111001101, 16),
     _bits(0b1111111111001110, 16),
     _bits(0b1111111111001111, 16),
     _bits(0b1111111111010000, 16),
     _bits(0b1111111111010001, 16)},
    {_bits(0b111111001, 9), // B/1
     _bits(0b1111111111010010, 16),
     _bits(0b1111111111010011, 16),
     _bits(0b1111111111010100, 16),
     _bits(0b1111111111010101, 16),
     _bits(0b1111111111010110, 16),
     _bits(0b1111111111010111, 16),
     _bits(0b1111111111011000, 16),
     _bits(0b1111111111011001, 16),
     _bits(0b1111111111011010, 16)},

    {_bits(0b111111010, 9), // C/1
     _bits(0b1111111111011011, 16),
     _bits(0b1111111111011100, 16),
     _bits(0b1111111111011101, 16),
     _bits(0b1111111111011110, 16),
     _bits(0b1111111111011111, 16),
     _bits(0b1111111111100000, 16),
     _bits(0b1111111111100001, 16),
     _bits(0b1111111111100010, 16),
     _bits(0b1111111111100011, 16)},
    {_bits(0b11111111001, 11), // D/1
     _bits(0b1111111111100100, 16),
     _bits(0b1111111111100101, 16),
     _bits(0b1111111111100110, 16),
     _bits(0b1111111111100111, 16),
     _bits(0b1111111111101000, 16),
     _bits(0b1111111111101001, 16),
     _bits(0b1111111111101010, 16),
     _bits(0b1111111111101011, 16),
     _bits(0b1111111111101100, 16)},
    {_bits(0b11111111100000, 14), // E/1
     _bits(0b1111111111101101, 16),
     _bits(0b1111111111101110, 16),
     _bits(0b1111111111101111, 16),
     _bits(0b1111111111110000, 16),
     _bits(0b1111111111110001, 16),
     _bits(0b1111111111110010, 16),
     _bits(0b1111111111110011, 16),
     _bits(0b1111111111110100, 16),
     _bits(0b1111111111110101, 16)},
    {_bits(0b111111111000011, 15), // F/1
     _bits(0b1111111111110110, 16),
     _bits(0b1111111111110111, 16),
     _bits(0b1111111111111000, 16),
     _bits(0b1111111111111001, 16),
     _bits(0b1111111111111010, 16),
     _bits(0b1111111111111011, 16),
     _bits(0b1111111111111100, 16),
     _bits(0b1111111111111101, 16),
     _bits(0b1111111111111110, 16)}};
const static std::map<_bits, cv::Vec2i> I_CHR_AC = {
    {_bits(0b00, 2), cv::Vec2i(0, 0)},
    {_bits(0b1111111010, 10), cv::Vec2i(15, 0)},
    {_bits(0b01, 2), cv::Vec2i(0, 1)},
    {_bits(0b100, 3), cv::Vec2i(0, 2)},
    {_bits(0b1010, 4), cv::Vec2i(0, 3)},
    {_bits(0b11000, 5), cv::Vec2i(0, 4)},
    {_bits(0b11001, 5), cv::Vec2i(0, 5)},
    {_bits(0b111000, 6), cv::Vec2i(0, 6)},
    {_bits(0b1111000, 7), cv::Vec2i(0, 7)},
    {_bits(0b111110100, 9), cv::Vec2i(0, 8)},
    {_bits(0b1111110110, 10), cv::Vec2i(0, 9)},
    {_bits(0b111111110100, 12), cv::Vec2i(0, 10)},
    {_bits(0b1011, 4), cv::Vec2i(1, 1)},
    {_bits(0b111001, 6), cv::Vec2i(1, 2)},
    {_bits(0b11110110, 8), cv::Vec2i(1, 3)},
    {_bits(0b111110101, 9), cv::Vec2i(1, 4)},
    {_bits(0b11111110110, 11), cv::Vec2i(1, 5)},
    {_bits(0b111111110101, 12), cv::Vec2i(1, 6)},
    {_bits(0b1111111110001000, 16), cv::Vec2i(1, 7)},
    {_bits(0b1111111110001001, 16), cv::Vec2i(1, 8)},
    {_bits(0b1111111110001010, 16), cv::Vec2i(1, 9)},
    {_bits(0b1111111110001011, 16), cv::Vec2i(1, 10)},
    {_bits(0b11010, 5), cv::Vec2i(2, 1)},
    {_bits(0b11110111, 8), cv::Vec2i(2, 2)},
    {_bits(0b1111110111, 10), cv::Vec2i(2, 3)},
    {_bits(0b111111110110, 12), cv::Vec2i(2, 4)},
    {_bits(0b111111111000010, 15), cv::Vec2i(2, 5)},
    {_bits(0b1111111110001100, 16), cv::Vec2i(2, 6)},
    {_bits(0b1111111110001101, 16), cv::Vec2i(2, 7)},
    {_bits(0b1111111110001110, 16), cv::Vec2i(2, 8)},
    {_bits(0b1111111110001111, 16), cv::Vec2i(2, 9)},
    {_bits(0b1111111110010000, 16), cv::Vec2i(2, 10)},
    {_bits(0b11011, 5), cv::Vec2i(3, 1)},
    {_bits(0b11111000, 8), cv::Vec2i(3, 2)},
    {_bits(0b1111111000, 10), cv::Vec2i(3, 3)},
    {_bits(0b111111110111, 12), cv::Vec2i(3, 4)},
    {_bits(0b1111111110010001, 16), cv::Vec2i(3, 5)},
    {_bits(0b1111111110010010, 16), cv::Vec2i(3, 6)},
    {_bits(0b1111111110010011, 16), cv::Vec2i(3, 7)},
    {_bits(0b1111111110010100, 16), cv::Vec2i(3, 8)},
    {_bits(0b1111111110010101, 16), cv::Vec2i(3, 9)},
    {_bits(0b1111111110010110, 16), cv::Vec2i(3, 10)},
    {_bits(0b111010, 6), cv::Vec2i(4, 1)},
    {_bits(0b111110110, 9), cv::Vec2i(4, 2)},
    {_bits(0b1111111110010111, 16), cv::Vec2i(4, 3)},
    {_bits(0b1111111110011000, 16), cv::Vec2i(4, 4)},
    {_bits(0b1111111110011001, 16), cv::Vec2i(4, 5)},
    {_bits(0b1111111110011010, 16), cv::Vec2i(4, 6)},
    {_bits(0b1111111110011011, 16), cv::Vec2i(4, 7)},
    {_bits(0b1111111110011100, 16), cv::Vec2i(4, 8)},
    {_bits(0b1111111110011101, 16), cv::Vec2i(4, 9)},
    {_bits(0b1111111110011110, 16), cv::Vec2i(4, 10)},
    {_bits(0b111011, 6), cv::Vec2i(5, 1)},
    {_bits(0b1111111001, 10), cv::Vec2i(5, 2)},
    {_bits(0b1111111110011111, 16), cv::Vec2i(5, 3)},
    {_bits(0b1111111110100000, 16), cv::Vec2i(5, 4)},
    {_bits(0b1111111110100001, 16), cv::Vec2i(5, 5)},
    {_bits(0b1111111110100010, 16), cv::Vec2i(5, 6)},
    {_bits(0b1111111110100011, 16), cv::Vec2i(5, 7)},
    {_bits(0b1111111110100100, 16), cv::Vec2i(5, 8)},
    {_bits(0b1111111110100101, 16), cv::Vec2i(5, 9)},
    {_bits(0b1111111110100110, 16), cv::Vec2i(5, 10)},
    {_bits(0b1111001, 7), cv::Vec2i(6, 1)},
    {_bits(0b11111110111, 11), cv::Vec2i(6, 2)},
    {_bits(0b1111111110100111, 16), cv::Vec2i(6, 3)},
    {_bits(0b1111111110101000, 16), cv::Vec2i(6, 4)},
    {_bits(0b1111111110101001, 16), cv::Vec2i(6, 5)},
    {_bits(0b1111111110101010, 16), cv::Vec2i(6, 6)},
    {_bits(0b1111111110101011, 16), cv::Vec2i(6, 7)},
    {_bits(0b1111111110101100, 16), cv::Vec2i(6, 8)},
    {_bits(0b1111111110101101, 16), cv::Vec2i(6, 9)},
    {_bits(0b1111111110101110, 16), cv::Vec2i(6, 10)},
    {_bits(0b1111010, 7), cv::Vec2i(7, 1)},
    {_bits(0b11111111000, 11), cv::Vec2i(7, 2)},
    {_bits(0b1111111110101111, 16), cv::Vec2i(7, 3)},
    {_bits(0b1111111110110000, 16), cv::Vec2i(7, 4)},
    {_bits(0b1111111110110001, 16), cv::Vec2i(7, 5)},
    {_bits(0b1111111110110010, 16), cv::Vec2i(7, 6)},
    {_bits(0b1111111110110011, 16), cv::Vec2i(7, 7)},
    {_bits(0b1111111110110100, 16), cv::Vec2i(7, 8)},
    {_bits(0b1111111110110101, 16), cv::Vec2i(7, 9)},
    {_bits(0b1111111110110110, 16), cv::Vec2i(7, 10)},
    {_bits(0b11111001, 8), cv::Vec2i(8, 1)},
    {_bits(0b1111111110110111, 16), cv::Vec2i(8, 2)},
    {_bits(0b1111111110111000, 16), cv::Vec2i(8, 3)},
    {_bits(0b1111111110111001, 16), cv::Vec2i(8, 4)},
    {_bits(0b1111111110111010, 16), cv::Vec2i(8, 5)},
    {_bits(0b1111111110111011, 16), cv::Vec2i(8, 6)},
    {_bits(0b1111111110111100, 16), cv::Vec2i(8, 7)},
    {_bits(0b1111111110111101, 16), cv::Vec2i(8, 8)},
    {_bits(0b1111111110111110, 16), cv::Vec2i(8, 9)},
    {_bits(0b1111111110111111, 16), cv::Vec2i(8, 10)},
    {_bits(0b111110111, 9), cv::Vec2i(9, 1)},
    {_bits(0b1111111111000000, 16), cv::Vec2i(9, 2)},
    {_bits(0b1111111111000001, 16), cv::Vec2i(9, 3)},
    {_bits(0b1111111111000010, 16), cv::Vec2i(9, 4)},
    {_bits(0b1111111111000011, 16), cv::Vec2i(9, 5)},
    {_bits(0b1111111111000100, 16), cv::Vec2i(9, 6)},
    {_bits(0b1111111111000101, 16), cv::Vec2i(9, 7)},
    {_bits(0b1111111111000110, 16), cv::Vec2i(9, 8)},
    {_bits(0b1111111111000111, 16), cv::Vec2i(9, 9)},
    {_bits(0b1111111111001000, 16), cv::Vec2i(9, 10)},
    {_bits(0b111111000, 9), cv::Vec2i(10, 1)},
    {_bits(0b1111111111001001, 16), cv::Vec2i(10, 2)},
    {_bits(0b1111111111001010, 16), cv::Vec2i(10, 3)},
    {_bits(0b1111111111001011, 16), cv::Vec2i(10, 4)},
    {_bits(0b1111111111001100, 16), cv::Vec2i(10, 5)},
    {_bits(0b1111111111001101, 16), cv::Vec2i(10, 6)},
    {_bits(0b1111111111001110, 16), cv::Vec2i(10, 7)},
    {_bits(0b1111111111001111, 16), cv::Vec2i(10, 8)},
    {_bits(0b1111111111010000, 16), cv::Vec2i(10, 9)},
    {_bits(0b1111111111010001, 16), cv::Vec2i(10, 10)},
    {_bits(0b111111001, 9), cv::Vec2i(11, 1)},
    {_bits(0b1111111111010010, 16), cv::Vec2i(11, 2)},
    {_bits(0b1111111111010011, 16), cv::Vec2i(11, 3)},
    {_bits(0b1111111111010100, 16), cv::Vec2i(11, 4)},
    {_bits(0b1111111111010101, 16), cv::Vec2i(11, 5)},
    {_bits(0b1111111111010110, 16), cv::Vec2i(11, 6)},
    {_bits(0b1111111111010111, 16), cv::Vec2i(11, 7)},
    {_bits(0b1111111111011000, 16), cv::Vec2i(11, 8)},
    {_bits(0b1111111111011001, 16), cv::Vec2i(11, 9)},
    {_bits(0b1111111111011010, 16), cv::Vec2i(11, 10)},
    {_bits(0b111111010, 9), cv::Vec2i(12, 1)},
    {_bits(0b1111111111011011, 16), cv::Vec2i(12, 2)},
    {_bits(0b1111111111011100, 16), cv::Vec2i(12, 3)},
    {_bits(0b1111111111011101, 16), cv::Vec2i(12, 4)},
    {_bits(0b1111111111011110, 16), cv::Vec2i(12, 5)},
    {_bits(0b1111111111011111, 16), cv::Vec2i(12, 6)},
    {_bits(0b1111111111100000, 16), cv::Vec2i(12, 7)},
    {_bits(0b1111111111100001, 16), cv::Vec2i(12, 8)},
    {_bits(0b1111111111100010, 16), cv::Vec2i(12, 9)},
    {_bits(0b1111111111100011, 16), cv::Vec2i(12, 10)},
    {_bits(0b11111111001, 11), cv::Vec2i(13, 1)},
    {_bits(0b1111111111100100, 16), cv::Vec2i(13, 2)},
    {_bits(0b1111111111100101, 16), cv::Vec2i(13, 3)},
    {_bits(0b1111111111100110, 16), cv::Vec2i(13, 4)},
    {_bits(0b1111111111100111, 16), cv::Vec2i(13, 5)},
    {_bits(0b1111111111101000, 16), cv::Vec2i(13, 6)},
    {_bits(0b1111111111101001, 16), cv::Vec2i(13, 7)},
    {_bits(0b1111111111101010, 16), cv::Vec2i(13, 8)},
    {_bits(0b1111111111101011, 16), cv::Vec2i(13, 9)},
    {_bits(0b1111111111101100, 16), cv::Vec2i(13, 10)},
    {_bits(0b11111111100000, 14), cv::Vec2i(14, 1)},
    {_bits(0b1111111111101101, 16), cv::Vec2i(14, 2)},
    {_bits(0b1111111111101110, 16), cv::Vec2i(14, 3)},
    {_bits(0b1111111111101111, 16), cv::Vec2i(14, 4)},
    {_bits(0b1111111111110000, 16), cv::Vec2i(14, 5)},
    {_bits(0b1111111111110001, 16), cv::Vec2i(14, 6)},
    {_bits(0b1111111111110010, 16), cv::Vec2i(14, 7)},
    {_bits(0b1111111111110011, 16), cv::Vec2i(14, 8)},
    {_bits(0b1111111111110100, 16), cv::Vec2i(14, 9)},
    {_bits(0b1111111111110101, 16), cv::Vec2i(14, 10)},
    {_bits(0b111111111000011, 15), cv::Vec2i(15, 1)},
    {_bits(0b1111111111110110, 16), cv::Vec2i(15, 2)},
    {_bits(0b1111111111110111, 16), cv::Vec2i(15, 3)},
    {_bits(0b1111111111111000, 16), cv::Vec2i(15, 4)},
    {_bits(0b1111111111111001, 16), cv::Vec2i(15, 5)},
    {_bits(0b1111111111111010, 16), cv::Vec2i(15, 6)},
    {_bits(0b1111111111111011, 16), cv::Vec2i(15, 7)},
    {_bits(0b1111111111111100, 16), cv::Vec2i(15, 8)},
    {_bits(0b1111111111111101, 16), cv::Vec2i(15, 9)},
    {_bits(0b1111111111111110, 16), cv::Vec2i(15, 10)}};

} // namespace mini_jpeg

#endif